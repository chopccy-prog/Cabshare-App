// lib/services/unified_auth_service.dart - COMPLETE UNIFIED AUTHENTICATION
import 'dart:async';\nimport 'dart:convert';\nimport 'package:firebase_auth/firebase_auth.dart' as fb;\nimport 'package:supabase_flutter/supabase_flutter.dart' as sb;\nimport 'package:http/http.dart' as http;\n\n/// Unified authentication service that ensures one user has one account\n/// regardless of login method (email/password or phone/OTP)\nclass UnifiedAuthService {\n  static final UnifiedAuthService _instance = UnifiedAuthService._internal();\n  factory UnifiedAuthService() => _instance;\n  UnifiedAuthService._internal();\n\n  final _supabase = sb.Supabase.instance;\n  final _firebase = fb.FirebaseAuth.instance;\n  \n  static const String _apiBaseUrl = 'http://10.0.2.2:3000';\n\n  final StreamController<void> _authStateController = StreamController<void>.broadcast();\n  Stream<void> get authStateStream => _authStateController.stream;\n\n  Map<String, dynamic>? _currentUser;\n  Map<String, dynamic>? _pendingRegistration;\n  String? _pendingPhoneVerification;\n  String? _pendingPhoneLogin;\n\n  void initializeListeners() {\n    // Listen to both auth providers\n    _supabase.client.auth.onAuthStateChange.listen((event) {\n      if (event.event == sb.AuthChangeEvent.signedIn) {\n        _handleSupabaseSignIn(event.session?.user);\n      } else if (event.event == sb.AuthChangeEvent.signedOut) {\n        _handleSignOut();\n      }\n    });\n\n    _firebase.authStateChanges().listen((user) {\n      if (user != null) {\n        _handleFirebaseSignIn(user);\n      }\n    });\n  }\n\n  // UNIFIED REGISTRATION: Email + Phone for ONE account\n  Future<Map<String, dynamic>> registerWithEmailAndPhone({\n    required String email,\n    required String password,\n    required String fullName,\n    required String phone,\n  }) async {\n    try {\n      print('üîµ Starting unified registration...');\n      \n      // Step 1: Check if email or phone already exists\n      final existingUser = await _checkExistingUser(email, phone);\n      if (existingUser != null) {\n        throw Exception('User already exists with this email or phone');\n      }\n\n      // Step 2: Create primary Supabase account\n      final response = await _supabase.client.auth.signUp(\n        email: email,\n        password: password,\n        data: {\n          'full_name': fullName,\n          'phone': phone,\n        },\n      );\n\n      if (response.user == null) {\n        throw Exception('Failed to create email account');\n      }\n\n      final primaryUserId = response.user!.id;\n      print('‚úÖ Created primary user: $primaryUserId');\n\n      // Step 3: Sync to unified user table\n      await _syncUserToDatabase(response.user!, 'supabase');\n\n      // Step 4: Start phone verification for linking\n      _pendingRegistration = {\n        'primaryUserId': primaryUserId,\n        'phone': phone,\n        'email': email,\n        'fullName': fullName,\n      };\n\n      await _startPhoneVerification(phone, isRegistration: true);\n\n      return {\n        'success': true,\n        'primaryUserId': primaryUserId,\n        'nextStep': 'verify_phone',\n        'message': 'OTP sent to $phone',\n      };\n    } catch (e) {\n      print('‚ùå Registration error: $e');\n      throw Exception('Registration failed: $e');\n    }\n  }\n\n  // Complete registration by verifying phone OTP\n  Future<Map<String, dynamic>> completeRegistrationWithOTP(String otp) async {\n    try {\n      if (_pendingRegistration == null || _pendingPhoneVerification == null) {\n        throw Exception('No pending registration. Please start registration again.');\n      }\n\n      print('üîµ Completing registration with OTP...');\n\n      // Verify OTP and get Firebase credential\n      final credential = fb.PhoneAuthProvider.credential(\n        verificationId: _pendingPhoneVerification!,\n        smsCode: otp,\n      );\n\n      final firebaseResult = await _firebase.signInWithCredential(credential);\n      final firebaseUid = firebaseResult.user?.uid;\n\n      if (firebaseUid == null) {\n        throw Exception('Phone verification failed');\n      }\n\n      print('‚úÖ Phone verified: $firebaseUid');\n\n      // Link Firebase UID to the primary Supabase user\n      await _linkFirebaseToSupabaseUser(\n        _pendingRegistration!['primaryUserId'],\n        firebaseUid,\n        _pendingRegistration!['phone'],\n      );\n\n      // Clear pending states\n      _pendingRegistration = null;\n      _pendingPhoneVerification = null;\n\n      // Load the complete user\n      await _loadCurrentUser();\n\n      return {\n        'success': true,\n        'message': 'Registration completed successfully!',\n        'user': _currentUser,\n      };\n    } catch (e) {\n      print('‚ùå OTP verification error: $e');\n      throw Exception('OTP verification failed: $e');\n    }\n  }\n\n  // LOGIN WITH EMAIL\n  Future<Map<String, dynamic>> loginWithEmail(String email, String password) async {\n    try {\n      print('üîµ Logging in with email...');\n      \n      final response = await _supabase.client.auth.signInWithPassword(\n        email: email,\n        password: password,\n      );\n\n      if (response.user == null) {\n        throw Exception('Invalid email or password');\n      }\n\n      await _syncUserToDatabase(response.user!, 'supabase');\n      await _loadCurrentUser();\n\n      return {\n        'success': true,\n        'message': 'Logged in successfully',\n        'user': _currentUser,\n      };\n    } catch (e) {\n      print('‚ùå Email login error: $e');\n      throw Exception('Email login failed: $e');\n    }\n  }\n\n  // LOGIN WITH PHONE: Step 1 - Send OTP\n  Future<Map<String, dynamic>> startPhoneLogin(String phone) async {\n    try {\n      print('üîµ Starting phone login...');\n      \n      // Check if phone number is registered\n      final userExists = await _checkPhoneExists(phone);\n      if (!userExists) {\n        throw Exception('Phone number not registered. Please sign up first.');\n      }\n\n      await _startPhoneVerification(phone, isRegistration: false);\n\n      return {\n        'success': true,\n        'message': 'OTP sent to $phone',\n        'nextStep': 'verify_otp',\n      };\n    } catch (e) {\n      print('‚ùå Phone login start error: $e');\n      throw Exception('Failed to send OTP: $e');\n    }\n  }\n\n  // LOGIN WITH PHONE: Step 2 - Verify OTP\n  Future<Map<String, dynamic>> completePhoneLogin(String otp) async {\n    try {\n      if (_pendingPhoneLogin == null) {\n        throw Exception('No pending phone login. Please request OTP first.');\n      }\n\n      print('üîµ Completing phone login...');\n\n      final credential = fb.PhoneAuthProvider.credential(\n        verificationId: _pendingPhoneLogin!,\n        smsCode: otp,\n      );\n\n      await _firebase.signInWithCredential(credential);\n      _pendingPhoneLogin = null;\n\n      // Firebase auth state will trigger user loading\n      // Wait a moment for the process to complete\n      await Future.delayed(Duration(milliseconds: 500));\n      await _loadCurrentUser();\n\n      return {\n        'success': true,\n        'message': 'Logged in successfully',\n        'user': _currentUser,\n      };\n    } catch (e) {\n      print('‚ùå Phone login completion error: $e');\n      throw Exception('Phone login failed: $e');\n    }\n  }\n\n  // LOGOUT from both systems\n  Future<void> logout() async {\n    try {\n      await Future.wait([\n        _supabase.client.auth.signOut(),\n        _firebase.signOut(),\n      ]);\n      _handleSignOut();\n    } catch (e) {\n      print('‚ùå Logout error: $e');\n    }\n  }\n\n  // GETTERS\n  Map<String, dynamic>? get currentUser => _currentUser;\n  bool get isAuthenticated => _currentUser != null;\n  String? get currentUserId => _currentUser?['id'];\n  \n  List<String> get availableLoginMethods {\n    if (_currentUser == null) return [];\n    \n    final methods = <String>[];\n    if (_currentUser!['email'] != null && _currentUser!['email'].isNotEmpty) {\n      methods.add('email');\n    }\n    if (_currentUser!['firebase_uid'] != null) {\n      methods.add('phone');\n    }\n    return methods;\n  }\n\n  // PRIVATE HELPER METHODS\n\n  Future<void> _startPhoneVerification(String phone, {required bool isRegistration}) async {\n    final completer = Completer<void>();\n    \n    await _firebase.verifyPhoneNumber(\n      phoneNumber: phone,\n      verificationCompleted: (fb.PhoneAuthCredential credential) async {\n        // Auto-retrieval on some devices\n        try {\n          await _firebase.signInWithCredential(credential);\n          if (isRegistration) {\n            _pendingPhoneVerification = 'AUTO';\n          } else {\n            _pendingPhoneLogin = 'AUTO';\n          }\n          if (!completer.isCompleted) completer.complete();\n        } catch (e) {\n          if (!completer.isCompleted) completer.completeError(e);\n        }\n      },\n      verificationFailed: (fb.FirebaseAuthException e) {\n        if (!completer.isCompleted) completer.completeError(e);\n      },\n      codeSent: (String verificationId, int? resendToken) {\n        if (isRegistration) {\n          _pendingPhoneVerification = verificationId;\n        } else {\n          _pendingPhoneLogin = verificationId;\n        }\n        if (!completer.isCompleted) completer.complete();\n      },\n      codeAutoRetrievalTimeout: (String verificationId) {\n        // Keep the verification ID for manual entry\n      },\n    );\n\n    return completer.future;\n  }\n\n  Future<Map<String, dynamic>?> _checkExistingUser(String email, String phone) async {\n    try {\n      final response = await http.post(\n        Uri.parse('$_apiBaseUrl/auth/check-existing-user'),\n        headers: {'Content-Type': 'application/json'},\n        body: jsonEncode({'email': email, 'phone': phone}),\n      );\n\n      if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        return data['exists'] ? data['user'] : null;\n      }\n      return null;\n    } catch (e) {\n      print('‚ùå Check existing user error: $e');\n      return null;\n    }\n  }\n\n  Future<bool> _checkPhoneExists(String phone) async {\n    try {\n      final response = await http.get(\n        Uri.parse('$_apiBaseUrl/auth/check-phone'),\n        headers: {\n          'Content-Type': 'application/json',\n          'x-phone': phone,\n        },\n      );\n\n      if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        return data['exists'] == true;\n      }\n      return false;\n    } catch (e) {\n      print('‚ùå Check phone error: $e');\n      return false;\n    }\n  }\n\n  Future<void> _syncUserToDatabase(sb.User supabaseUser, String source) async {\n    try {\n      final response = await http.post(\n        Uri.parse('$_apiBaseUrl/auth/sync-user'),\n        headers: {'Content-Type': 'application/json'},\n        body: jsonEncode({\n          'user': {\n            'id': supabaseUser.id,\n            'email': supabaseUser.email,\n            'phone': supabaseUser.phone,\n            'user_metadata': supabaseUser.userMetadata,\n          },\n          'source': source,\n        }),\n      );\n\n      if (response.statusCode != 200) {\n        print('‚ùå User sync failed: ${response.body}');\n      }\n    } catch (e) {\n      print('‚ùå User sync error: $e');\n    }\n  }\n\n  Future<void> _linkFirebaseToSupabaseUser(String primaryUserId, String firebaseUid, String phone) async {\n    try {\n      final response = await http.post(\n        Uri.parse('$_apiBaseUrl/auth/link-firebase'),\n        headers: {'Content-Type': 'application/json'},\n        body: jsonEncode({\n          'primaryUserId': primaryUserId,\n          'firebaseUid': firebaseUid,\n          'phone': phone,\n        }),\n      );\n\n      if (response.statusCode != 200) {\n        throw Exception('Failed to link phone number');\n      }\n\n      print('‚úÖ Phone linked to primary user');\n    } catch (e) {\n      print('‚ùå Link Firebase error: $e');\n      throw e;\n    }\n  }\n\n  Future<void> _loadCurrentUser() async {\n    try {\n      final userId = _getCurrentUserIdFromAuth();\n      if (userId == null) {\n        _currentUser = null;\n        return;\n      }\n\n      final response = await http.get(\n        Uri.parse('$_apiBaseUrl/auth/current-user'),\n        headers: {\n          'Content-Type': 'application/json',\n          'x-user-id': userId,\n        },\n      );\n\n      if (response.statusCode == 200) {\n        final data = jsonDecode(response.body);\n        _currentUser = data['user'];\n        print('‚úÖ Current user loaded: ${_currentUser?['id']}');\n      } else {\n        _currentUser = null;\n      }\n    } catch (e) {\n      print('‚ùå Load current user error: $e');\n      _currentUser = null;\n    }\n  }\n\n  String? _getCurrentUserIdFromAuth() {\n    // Prefer Supabase user ID\n    final supabaseUser = _supabase.client.auth.currentUser;\n    if (supabaseUser != null) {\n      return supabaseUser.id;\n    }\n\n    // Fall back to Firebase UID (this will be mapped to primary user ID)\n    final firebaseUser = _firebase.currentUser;\n    return firebaseUser?.uid;\n  }\n\n  void _handleSupabaseSignIn(sb.User? user) {\n    if (user != null) {\n      _syncUserToDatabase(user, 'supabase');\n      _loadCurrentUser();\n      _authStateController.add(null);\n    }\n  }\n\n  void _handleFirebaseSignIn(fb.User user) {\n    // Find the primary user ID associated with this Firebase UID\n    _loadCurrentUser();\n    _authStateController.add(null);\n  }\n\n  void _handleSignOut() {\n    _currentUser = null;\n    _pendingRegistration = null;\n    _pendingPhoneVerification = null;\n    _pendingPhoneLogin = null;\n    _authStateController.add(null);\n  }\n\n  void dispose() {\n    _authStateController.close();\n  }\n}\n\n// USAGE EXAMPLE:\n// \n// Registration:\n// final result = await UnifiedAuthService().registerWithEmailAndPhone(\n//   email: 'user@test.com',\n//   password: 'password123', \n//   fullName: 'John Doe',\n//   phone: '+919876543210',\n// );\n// // Then: await UnifiedAuthService().completeRegistrationWithOTP('123456');\n//\n// Email Login:\n// await UnifiedAuthService().loginWithEmail('user@test.com', 'password123');\n//\n// Phone Login:\n// await UnifiedAuthService().startPhoneLogin('+919876543210');\n// // Then: await UnifiedAuthService().completePhoneLogin('123456');