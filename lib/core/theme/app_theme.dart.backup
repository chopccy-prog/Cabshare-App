// lib/core/theme/app_theme.dart - UNIFIED PROFESSIONAL THEME SYSTEM
import 'package:flutter/material.dart';

class AppTheme {
  // Primary Color Palette
  static const Color primaryBlue = Color(0xFF1E40AF);
  static const Color primaryDark = Color(0xFF1E3A8A);
  static const Color primaryLight = Color(0xFF3B82F6);
  
  // Accent Colors
  static const Color accentGreen = Color(0xFF059669);
  static const Color accentRed = Color(0xFFDC2626);
  static const Color accentOrange = Color(0xFFEA580C);
  static const Color accentPurple = Color(0xFF7C3AED);
  static const Color accentYellow = Color(0xFFF59E0B);
  
  // Surface Colors
  static const Color surfaceWhite = Color(0xFFFFFFFF);
  static const Color surfaceLight = Color(0xFFF8FAFC);
  static const Color surfaceGrey = Color(0xFFF1F5F9);
  static const Color surfaceDark = Color(0xFFE2E8F0);
  
  // Text Colors
  static const Color textDark = Color(0xFF0F172A);
  static const Color textMedium = Color(0xFF475569);
  static const Color textLight = Color(0xFF64748B);
  static const Color textDisabled = Color(0xFF94A3B8);
  
  // Status Colors
  static const Color successGreen = Color(0xFF10B981);
  static const Color warningYellow = Color(0xFFF59E0B);
  static const Color errorRed = Color(0xFFEF4444);
  static const Color infoBlue = Color(0xFF3B82F6);
  
  // Gradients
  static const LinearGradient primaryGradient = LinearGradient(
    begin: Alignment.topLeft,
    end: Alignment.bottomRight,
    colors: [primaryBlue, primaryDark, accentPurple],
  );
  
  static const LinearGradient successGradient = LinearGradient(
    begin: Alignment.topLeft,
    end: Alignment.bottomRight,
    colors: [accentGreen, Color(0xFF047857)],
  );
  
  static const LinearGradient warningGradient = LinearGradient(
    begin: Alignment.topLeft,
    end: Alignment.bottomRight,
    colors: [accentOrange, accentYellow],
  );

  // Text Styles
  static const TextStyle headingLarge = TextStyle(
    fontSize: 28,
    fontWeight: FontWeight.bold,
    color: textDark,
    letterSpacing: -0.5,
  );
  
  static const TextStyle headingMedium = TextStyle(
    fontSize: 22,
    fontWeight: FontWeight.bold,
    color: textDark,
    letterSpacing: -0.25,
  );
  
  static const TextStyle headingSmall = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.w600,
    color: textDark,
  );
  
  static const TextStyle bodyLarge = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.w500,
    color: textDark,
  );
  
  static const TextStyle bodyMedium = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.w500,
    color: textMedium,
  );
  
  static const TextStyle bodySmall = TextStyle(
    fontSize: 12,
    fontWeight: FontWeight.w500,
    color: textLight,
  );
  
  static const TextStyle labelLarge = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.w600,
    color: textMedium,
  );
  
  static const TextStyle labelMedium = TextStyle(
    fontSize: 12,
    fontWeight: FontWeight.w600,
    color: textMedium,
  );

  // Spacing
  static const double spaceXS = 4.0;
  static const double spaceSM = 8.0;
  static const double spaceMD = 12.0;
  static const double spaceLG = 16.0;
  static const double spaceXL = 20.0;
  static const double space2XL = 24.0;
  static const double space3XL = 32.0;

  // Border Radius
  static const double radiusXS = 4.0;
  static const double radiusSM = 8.0;
  static const double radiusMD = 12.0;
  static const double radiusLG = 16.0;
  static const double radiusXL = 20.0;
  static const double radius2XL = 24.0;

  // Shadows
  static List<BoxShadow> softShadow = [
    BoxShadow(
      color: Colors.black.withOpacity(0.05),
      blurRadius: 10,
      offset: const Offset(0, 4),
    ),
  ];
  
  static List<BoxShadow> mediumShadow = [
    BoxShadow(
      color: primaryBlue.withOpacity(0.1),
      blurRadius: 20,
      offset: const Offset(0, 8),
    ),
    BoxShadow(
      color: Colors.black.withOpacity(0.05),
      blurRadius: 10,
      offset: const Offset(0, 4),
    ),
  ];
  
  static List<BoxShadow> strongShadow = [
    BoxShadow(
      color: primaryBlue.withOpacity(0.2),
      blurRadius: 30,
      offset: const Offset(0, 12),
    ),
    BoxShadow(
      color: Colors.black.withOpacity(0.1),
      blurRadius: 15,
      offset: const Offset(0, 6),
    ),
  ];

  // Reusable Decoration Builders
  static BoxDecoration cardDecoration({
    Color? color,
    List<BoxShadow>? boxShadow,
    BorderRadius? borderRadius,
    Border? border,
  }) {
    return BoxDecoration(
      color: color ?? surfaceWhite,
      borderRadius: borderRadius ?? BorderRadius.circular(radiusLG),
      boxShadow: boxShadow ?? mediumShadow,
      border: border,
    );
  }
  
  static BoxDecoration gradientDecoration({
    required LinearGradient gradient,
    BorderRadius? borderRadius,
    List<BoxShadow>? boxShadow,
  }) {
    return BoxDecoration(
      gradient: gradient,
      borderRadius: borderRadius ?? BorderRadius.circular(radiusLG),
      boxShadow: boxShadow ?? mediumShadow,
    );
  }
  
  static BoxDecoration iconContainerDecoration(Color color) {
    return BoxDecoration(
      gradient: LinearGradient(
        colors: [color, color.withOpacity(0.7)],
        begin: Alignment.topLeft,
        end: Alignment.bottomRight,
      ),
      borderRadius: BorderRadius.circular(radiusMD),
      boxShadow: [
        BoxShadow(
          color: color.withOpacity(0.3),
          blurRadius: 8,
          offset: const Offset(0, 4),
        ),
      ],
    );
  }

  // Input Decoration
  static InputDecoration inputDecoration({
    required String label,
    required String hint,
    required IconData icon,
    Widget? suffixIcon,
    Color? iconColor,
  }) {
    return InputDecoration(
      labelText: label,
      hintText: hint,
      prefixIcon: Container(
        margin: const EdgeInsets.all(12),
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: (iconColor ?? primaryBlue).withOpacity(0.1),
          borderRadius: BorderRadius.circular(radiusSM),
        ),
        child: Icon(icon, color: iconColor ?? primaryBlue, size: 20),
      ),
      suffixIcon: suffixIcon,
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(radiusLG),
        borderSide: BorderSide(color: surfaceGrey, width: 1.5),
      ),
      enabledBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(radiusLG),
        borderSide: BorderSide(color: surfaceGrey, width: 1.5),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(radiusLG),
        borderSide: BorderSide(color: primaryBlue, width: 2),
      ),
      errorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(radiusLG),
        borderSide: BorderSide(color: errorRed, width: 2),
      ),
      filled: true,
      fillColor: surfaceWhite,
      contentPadding: const EdgeInsets.symmetric(horizontal: spaceLG, vertical: spaceLG),
      labelStyle: labelLarge.copyWith(color: textMedium),
      hintStyle: bodyMedium.copyWith(color: textLight),
    );
  }

  // Button Styles
  static ButtonStyle primaryButtonStyle = ElevatedButton.styleFrom(
    backgroundColor: primaryBlue,
    foregroundColor: Colors.white,
    elevation: 8,
    shadowColor: primaryBlue.withOpacity(0.3),
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(radiusLG),
    ),
    padding: const EdgeInsets.symmetric(horizontal: space2XL, vertical: spaceLG),
    textStyle: bodyLarge.copyWith(
      fontWeight: FontWeight.bold,
      letterSpacing: 0.5,
    ),
  );
  
  static ButtonStyle secondaryButtonStyle = ElevatedButton.styleFrom(
    backgroundColor: surfaceWhite,
    foregroundColor: primaryBlue,
    elevation: 2,
    shadowColor: primaryBlue.withOpacity(0.1),
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(radiusLG),
      side: BorderSide(color: primaryBlue, width: 2),
    ),
    padding: const EdgeInsets.symmetric(horizontal: space2XL, vertical: spaceLG),
    textStyle: bodyLarge.copyWith(
      fontWeight: FontWeight.w600,
      letterSpacing: 0.5,
    ),
  );
  
  static ButtonStyle successButtonStyle = ElevatedButton.styleFrom(
    backgroundColor: accentGreen,
    foregroundColor: Colors.white,
    elevation: 8,
    shadowColor: accentGreen.withOpacity(0.3),
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(radiusLG),
    ),
    padding: const EdgeInsets.symmetric(horizontal: space2XL, vertical: spaceLG),
    textStyle: bodyLarge.copyWith(
      fontWeight: FontWeight.bold,
      letterSpacing: 0.5,
    ),
  );
  
  static ButtonStyle dangerButtonStyle = ElevatedButton.styleFrom(
    backgroundColor: errorRed,
    foregroundColor: Colors.white,
    elevation: 8,
    shadowColor: errorRed.withOpacity(0.3),
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(radiusLG),
    ),
    padding: const EdgeInsets.symmetric(horizontal: space2XL, vertical: spaceLG),
    textStyle: bodyLarge.copyWith(
      fontWeight: FontWeight.bold,
      letterSpacing: 0.5,
    ),
  );

  // App Bar Theme
  static AppBarTheme appBarTheme = const AppBarTheme(
    backgroundColor: primaryBlue,
    foregroundColor: Colors.white,
    elevation: 0,
    centerTitle: true,
    titleTextStyle: TextStyle(
      fontSize: 20,
      fontWeight: FontWeight.bold,
      color: Colors.white,
      letterSpacing: 0.5,
    ),
  );

  // Card Theme
  static CardTheme cardTheme = CardTheme(
    color: surfaceWhite,
    elevation: 8,
    shadowColor: primaryBlue.withOpacity(0.1),
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(radiusLG),
    ),
    margin: const EdgeInsets.all(spaceLG),
  );

  // Complete Theme Data
  static ThemeData get lightTheme {
    return ThemeData(
      useMaterial3: true,
      colorScheme: const ColorScheme.light(
        primary: primaryBlue,
        secondary: accentGreen,
        surface: surfaceWhite,
        background: surfaceLight,
        error: errorRed,
        onPrimary: Colors.white,
        onSecondary: Colors.white,
        onSurface: textDark,
        onBackground: textDark,
        onError: Colors.white,
      ),
      appBarTheme: appBarTheme,
      cardTheme: cardTheme,
      elevatedButtonTheme: ElevatedButtonThemeData(style: primaryButtonStyle),
      textTheme: const TextTheme(
        headlineLarge: headingLarge,
        headlineMedium: headingMedium,
        headlineSmall: headingSmall,
        bodyLarge: bodyLarge,
        bodyMedium: bodyMedium,
        bodySmall: bodySmall,
        labelLarge: labelLarge,
        labelMedium: labelMedium,
      ),
      inputDecorationTheme: InputDecorationTheme(
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(radiusLG),
          borderSide: BorderSide(color: surfaceGrey, width: 1.5),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(radiusLG),
          borderSide: BorderSide(color: surfaceGrey, width: 1.5),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(radiusLG),
          borderSide: BorderSide(color: primaryBlue, width: 2),
        ),
        filled: true,
        fillColor: surfaceWhite,
        contentPadding: const EdgeInsets.symmetric(horizontal: spaceLG, vertical: spaceLG),
      ),
      scaffoldBackgroundColor: surfaceLight,
      fontFamily: 'SF Pro Display', // Use system font
    );
  }
}

// Theme Extension for Custom Properties
class AppThemeExtension extends ThemeExtension<AppThemeExtension> {
  final LinearGradient primaryGradient;
  final LinearGradient successGradient;
  final LinearGradient warningGradient;
  final List<BoxShadow> cardShadow;
  final List<BoxShadow> buttonShadow;

  const AppThemeExtension({
    required this.primaryGradient,
    required this.successGradient,
    required this.warningGradient,
    required this.cardShadow,
    required this.buttonShadow,
  });

  @override
  AppThemeExtension copyWith({
    LinearGradient? primaryGradient,
    LinearGradient? successGradient,
    LinearGradient? warningGradient,
    List<BoxShadow>? cardShadow,
    List<BoxShadow>? buttonShadow,
  }) {
    return AppThemeExtension(
      primaryGradient: primaryGradient ?? this.primaryGradient,
      successGradient: successGradient ?? this.successGradient,
      warningGradient: warningGradient ?? this.warningGradient,
      cardShadow: cardShadow ?? this.cardShadow,
      buttonShadow: buttonShadow ?? this.buttonShadow,
    );
  }

  @override
  AppThemeExtension lerp(ThemeExtension<AppThemeExtension>? other, double t) {
    if (other is! AppThemeExtension) {
      return this;
    }
    return AppThemeExtension(
      primaryGradient: LinearGradient.lerp(primaryGradient, other.primaryGradient, t)!,
      successGradient: LinearGradient.lerp(successGradient, other.successGradient, t)!,
      warningGradient: LinearGradient.lerp(warningGradient, other.warningGradient, t)!,
      cardShadow: BoxShadow.lerpList(cardShadow, other.cardShadow, t)!,
      buttonShadow: BoxShadow.lerpList(buttonShadow, other.buttonShadow, t)!,
    );
  }

  static const AppThemeExtension light = AppThemeExtension(
    primaryGradient: AppTheme.primaryGradient,
    successGradient: AppTheme.successGradient,
    warningGradient: AppTheme.warningGradient,
    cardShadow: AppTheme.mediumShadow,
    buttonShadow: AppTheme.strongShadow,
  );
}
